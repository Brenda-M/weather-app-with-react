{"version":3,"sources":["components/Search.js","components/WeatherCard.js","components/ForecastList.js","components/UseFetch.js","App.js","reportWebVitals.js","index.js"],"names":["Search","fetchData","useState","city","setCity","class","className","FormControl","placeholder","onChange","e","target","value","onClick","WeatherCard","dt","temp_min","temp_max","main","icon","date","Date","CardDeck","Card","style","width","bg","Img","variant","src","Body","Title","toLocaleDateString","toLocaleTimeString","Math","round","WeatherList","weathers","Row","map","weather","UseFetch","initialUrl","data","setData","error","setError","isLoading","setIsLoading","url","setUrl","useEffect","fetch","then","response","json","cod","message","catch","App","ForecastList","list","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ff0812e6.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { FormControl } from 'react-bootstrap';\r\n\r\nconst Search = ({ fetchData }) => {\r\n  const [city, setCity] = useState('');\r\n\r\n  const updateSearch = e => {\r\n    setCity(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <h1 class=\"title\">What's the weather like today?</h1>\r\n      </div>\r\n      <div className=\"search-box\">\r\n      <FormControl\r\n        placeholder='Enter city e.g Paris'\r\n        onChange={updateSearch}\r\n        value={city}\r\n        className='search-bar' \r\n      />\r\n      </div>\r\n   \r\n      <button onClick={() => fetchData(city)}className='search-button'>Check Weather</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React from 'react';\r\nimport { Card, CardDeck} from 'react-bootstrap';\r\n\r\nconst WeatherCard = ({ dt, temp_min, temp_max, main, icon }) => {\r\n  const date = new Date(dt);\r\n  return (\r\n    <div>\r\n      <CardDeck >\r\n      <Card className='weather-cards p-3 m-4'  style={{ width: '15rem' }} bg=\"secondary\">\r\n        <Card.Img\r\n          variant='top'\r\n          src={`http://openweathermap.org/img/wn/${icon}@2x.png`}\r\n        />\r\n        <Card.Body>\r\n          <Card.Title>{main}</Card.Title>\r\n          <p>\r\n            {date.toLocaleDateString()} - {date.toLocaleTimeString()}\r\n          </p>\r\n          <p>Min: {Math.round(temp_min)}F</p>\r\n          <p>Max: {Math.round(temp_max)}F</p>\r\n        </Card.Body>\r\n      </Card>\r\n      </CardDeck>\r\n      \r\n    </div>\r\n  );\r\n};\r\nexport default WeatherCard;\r\n","import React from 'react';\r\nimport { Row } from 'react-bootstrap';\r\nimport WeatherCard from './WeatherCard';\r\n\r\nconst WeatherList = ({ weathers }) => {\r\n  return (\r\n    <Row>\r\n      {weathers.map(({ dt, main, weather }) => (\r\n        <div key={dt}>\r\n          <WeatherCard\r\n            temp_max={main.temp_max}\r\n            temp_min={main.temp_min}\r\n            dt={dt * 1000}\r\n            main={weather[0].main}\r\n            icon={weather[0].icon} \r\n          />\r\n        </div>\r\n      ))}\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default WeatherList;\r\n","import { useState, useEffect } from 'react';\r\n\r\nconst UseFetch = initialUrl => {\r\n  const [data, setData] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(null);\r\n  const [url, setUrl] = useState(initialUrl);\r\n\r\n  \r\n\r\n  useEffect(() => {\r\n    if (!url) return;\r\n    setIsLoading(true);\r\n    setData(null);\r\n    setError(null);\r\n\r\n    fetch(url)\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        setIsLoading(false);\r\n        if (data.cod >= 400) {\r\n          setError(data.message);\r\n          return;\r\n        }\r\n        setData(data);\r\n      })\r\n      .catch(error => {\r\n        setIsLoading(false);\r\n        setError(error);\r\n      });\r\n  }, [url]);\r\n\r\n  return { data, error, isLoading, setUrl };\r\n};\r\n\r\nexport default UseFetch;\r\n","import './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Search from './components/Search'\nimport ForecastList from './components/ForecastList';\nimport UseFetch from './components/UseFetch';\n\n\n\nconst App = () => {\n  const APP_KEY = '61989eeb4a4021720c5ede6548438281';\n  const APP_URL = 'https://api.openweathermap.org/data/2.5';\n  const {data, error, isLoading, setUrl} = UseFetch();\n\n  const getData = () => {\n    if(error) return <h2>Error when fetching: {error}</h2>\n    if(!data && isLoading) return <h2>LOADING...</h2>\n    if(!data) return null;\n    return <ForecastList weathers={data.list} />\n  };\n\n\n  const getInfo = (city) =>{\n    setUrl(`${APP_URL}/forecast?q=${city}&cnt=5&appid=${APP_KEY}`)\n  }\n\n\n\n  return (\n    <main className=\"App\">\n      <Search fetchData={getInfo} />\n      {getData()}\n    </main>\n  );\n};\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n// import 'bootstrap/dist/css/bootstrap.min.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}